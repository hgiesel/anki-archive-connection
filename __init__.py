#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Anki Add-on: Anki Context

Please do not edit this file unless you know what you are doing.

Copyright: (c) 2019 Henrik Giesel <https://github.com/hgiesel>
License: GNU AGPLv3 <https://www.gnu.org/licenses/agpl.html>
"""
import pprint

import importlib.util

aqt_spec = importlib.util.find_spec('aqt')

def setup_config():
  base_path = os.path.dirname(os.readlink(__file__))

  if os.path.isfile(os.path.join(base_path, 'meta.json')):
    config_file_name = os.path.join(base_path, 'meta.json')
    with open(config_file_name, 'r') as f:
      config = json.load(f)['config']

  else:
    config_file_name = os.path.join(base_path, 'config.json')
    with open(config_file_name, 'r') as f:
      config = json.load(f)

  return config

if aqt_spec is not None:
    from .lib import context

elif __name__ == '__main__':
    from lib.parser import setup_parser

    from lib.identifier import Mode, Identifier, Printer
    from lib.util import decloze, stdlib
    from lib.srs_connection import AnkiConnection

    import json
    import os

    CONFIG = setup_config()
    ARGV, printer = setup_parser(CONFIG)

    if ARGV.cmd is not None:

        result = None

        if ARGV.cmd == 'paths':
            addr = Identifier(CONFIG, ARGV.uri, printer=printer)
            result = getattr(addr, ARGV.cmd)()

            if ARGV.paths == 'rel':
                printed = [(Identifier.to_rel_path(path[0]),path[1]) for path in result]
            elif ARGV.paths == 'id':
                printed = [(Identifier.to_identifier(path[0]),path[1]) for path in result]
            elif ARGV.paths == 'shortid':
                printed = [(Identifier.to_identifier(path[0], omit_section=True),path[1]) for path in result]
            elif ARGV.paths == 'none':
                printed = []

            if ARGV.delimiter == 'default':
                printed = [(path[0] + ':' + str(path[2]) + ':',) if path[2] is not None else (path[0],) for path in result]

            Printer.print_stats(printed, delimiter=ARGV.delimiter)

        elif ARGV.cmd == 'stats':
            addr = Identifier(CONFIG, ARGV.uri, printer=printer)

            result = getattr(addr, ARGV.cmd)()

            if ARGV.paths == 'default':
                ARGV.paths = 'id'

            if ARGV.paths == 'full':
                pass
            elif ARGV.paths == 'rel':
                result = [(Identifier.to_rel_path(e[0]),) + e[1:] for e in result]
            elif ARGV.paths == 'shortid':
                result = [(Identifier.to_identifier(e[0], omit_section=True),) + e[1:] for e in result]
            elif ARGV.paths == 'none':
                result = [e[1:] for e in result]
            elif ARGV.paths == 'id':
                result = [(Identifier.to_identifier(e[0]),) + e[1:] for e in result]

            Printer.print_stats(result, delimiter=ARGV.delimiter)


        elif ARGV.cmd == 'headings':
            addr = Identifier(CONFIG, ARGV.uri, printer=printer)

            result = getattr(addr, ARGV.cmd)()
            lines = [(val['file_name'],heading[0],heading[1]) for val in result for heading in val['headings']]

            if ARGV.paths == 'default':
                ARGV.paths='id'


            if ARGV.paths == 'full':
                pass
            elif ARGV.paths == 'rel':
                lines = [(Identifier.to_rel_path(line[0]),) + line[1:] for line in lines]
            elif ARGV.paths == 'id':
                lines = [(Identifier.to_identifier(line[0]),) + line[1:] for line in lines]
            elif ARGV.paths == 'shortid':
                lines = [(Identifier.to_identifier(line[0], omit_section=True),) + line[1:] for line in lines]
            elif ARGV.paths == 'none':
                lines = [line[1:] for line in lines]

            Printer.print_stats(lines, ARGV.delimiter if not ARGV.delimiter == 'default' else '\t')

        elif ARGV.cmd == 'pagerefs':
            addr = Identifier(CONFIG, '@:@', printer=printer)

            result = getattr(addr, ARGV.cmd)(ARGV.uri, expand_tocs=ARGV.tocs, further_refs=ARGV.further)
            lines = sorted([(val['file_name'],pageref[0],pageref[1]) for val in result for pageref in val['pagerefs']], key=lambda t: t[2])

            if ARGV.paths == 'default':
                ARGV.paths = 'id'

            if ARGV.paths == 'full':
                pass
            elif ARGV.paths == 'rel':
                lines = [(Identifier.to_rel_path(line[0]),) + line[1:] for line in lines]
            elif ARGV.paths == 'id':
                lines = [(Identifier.to_identifier(line[0]),) + line[1:] for line in lines]
            elif ARGV.paths == 'shortid':
                lines = [(Identifier.to_identifier(line[0], omit_section=True),) + line[1:] for line in lines]
            elif ARGV.paths == 'none':
                lines = [line[1:] for line in lines]

            Printer.print_stats(lines, ARGV.delimiter if not ARGV.delimiter == 'default' else '\t')

        elif ARGV.cmd == 'revpagerefs':

            result = getattr(Identifier(CONFIG, '@:@', printer=printer), ARGV.cmd)(
                    ARGV.uri, further_refs=ARGV.further, k=ARGV.k)
            pprint.pprint(result)

        elif ARGV.cmd == 'query':
            addr = Identifier(CONFIG, ARGV.uri, printer=printer)
            result = getattr(addr, ARGV.cmd)(ARGV.validate)
            print(' '.join(result))

        elif ARGV.cmd == 'verify':
            addr = Identifier(CONFIG, '@:@', printer=printer)

            result = getattr(addr, ARGV.cmd)(ARGV.uri)
            lines = [(entry['file_name'],error['type'],error['info'],error['lineno']) for entry in result for error in entry['errors']]

            if ARGV.paths == 'default':
                ARGV.paths = 'id'

            if ARGV.paths == 'full':
                pass
            elif ARGV.paths == 'rel':
                lines = [(Identifier.to_rel_path(entry['file_name']), error['type'],error['info'], error['lineno']) for entry in result for error in entry['errors']]
            elif ARGV.paths == 'id':
                lines = [(Identifier.to_identifier(entry['file_name']), error['type'],error['info'],error['lineno']) for entry in result for error in entry['errors']]
            elif ARGV.paths == 'shortid':
                lines = [(Identifier.to_identifier(entry['file_name'], omit_section=True), error['type'],error['info'],error['lineno']) for entry in result for error in entry['errors']]
            elif ARGV.paths == 'none':
                lines = [(error['type'],error['info'],error['lineno']) for entry in result for error in entry['errors']]

            Printer.print_stats(lines, delimiter=ARGV.delimiter)

        elif ARGV.cmd == 'match':
            anki_connection = AnkiConnection(CONFIG, printer=printer)

            addr = Identifier(CONFIG, ARGV.uri, printer=printer)
            result, outsiders = getattr(addr, ARGV.cmd)(anki_connection)

            if ARGV.paths == 'default':
                ARGV.paths = 'id'

            if ARGV.paths == 'full':
                pass
            elif ARGV.paths == 'rel':
                result = list(map(lambda t: (Identifier.to_rel_path(t[0]), t[1], t[2]), result))
            elif ARGV.paths == 'id':
                result = list(map(lambda t: (Identifier.to_identifier(t[0]), t[1], t[2]), result))
            elif ARGV.paths == 'shortid':
                result = list(map(lambda t: (Identifier.to_identifier(t[0], omit_section=True), t[1], t[2]), result))
            elif ARGV.paths == 'none':
                result = list(map(lambda t: (t[1], t[2]), result))

            all_results = sorted(result + outsiders, key=lambda t: t[0])

            if ARGV.mismatches:
                if addr.quest_component:
                    all_results = list(filter(lambda t: not t[2] == 1, all_results))
                else:
                    all_results = list(filter(lambda t: not int(t[1]) == t[2], all_results))

            Printer.print_stats(all_results)

        elif ARGV.cmd == 'add':
            anki_connection = AnkiConnection(CONFIG, printer=printer)

            ident = Identifier(CONFIG, ARGV.uri, printer=printer)
            if not ident.mode == Mode.QUEST_I:
                printer('uri must designate a single quest')

            _, path, _, qid = ident.paths()[0]

            result = anki_connection.anki_add(
                    path.replace(':', '::'), qid, ARGV.content.read())
            print(result)

        elif ARGV.cmd == 'browse':
            anki_connection = AnkiConnection(CONFIG, printer=printer)

            addr = Identifier(CONFIG, ARGV.uri, printer=printer).query()
            result = anki_connection.anki_browse(addr)

            print(result)

        elif ARGV.cmd == 'decloze':
            text = ARGV.infile.read()
            text_declozed = decloze(text)
            print(text_declozed, file=ARGV.outfile)

        elif ARGV.cmd == 'stdlib':
            stdlib()

        else:
            getattr(Identifier(CONFIG, ARGV.uri, printer=printer), ARGV.cmd)()
